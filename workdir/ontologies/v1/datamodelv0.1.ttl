@prefix : <http://www.tno.nl/digitalproductpassport#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .

# Classes
:DigitalProductPassport a owl:Class,  prov:Entity ;
    rdfs:isDefinedBy <http://www.tno.nl/digitalproductpassport#> ;
    rdfs:label "DigitalProductPassport" ;
    rdfs:comment "The base class for Digital Product Passports that application profiles may extend."

# Base properties
# There needs to be some agent owning the product at the moment 
# (to the extent of knowledge)
:currentOwner a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range prov:Agent .

# Would it be useful to describe past owners? It's unsure.
:pastOwner a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range prov:Agent .

# According to lore, legend, myth, the character sheets - the economic 
# operator manages the information of the DPP. Arguably, this can be 
# multiple entities
:economicOperator a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range prov:Agent .

# Multiple subproduct passports can be part of a single DPP. No 
# hierarchy established here, and some of the aspects may be subsumed 
# due to the attachment with a higher-level object.
:subComponent a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range :DigitalProductPassport .

# There needs to be some information about creation, and last update.
:lastUpdatedDateTime a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range xsd:dateTime .

:creationDateTime a rdf:Property ;
    rdfs:domain :DigitalProductPassport ;
    rdfs:range xsd:dateTime .

# Defining general attributes is not useful as other applications domains 
# can easily extend, and little is generic.

# Using PROV-O Entity and Activity for the Ownership Record and Event
:CreationEvent a prov:Activity;
:TransferEvent a prov:Activity;
:DestructionEvent a prov:Activity;

:OwnershipLog a owl:Class;
    rdfs:domain dpp:DigitalProductPassport;
    rdfs:range [
        a owl:Class;
        owl:unionOf (:CreationEvent :TransferEvent :DestructionEvent)
    ] .


# The CreationEvent generates a DPP instance. It's associated with an entity, a time and date.
# It's also connected to 1 entity, the creator.
# Generally these things can already be defined in Prov-O Activity.
# As we identify further perspectives, aspects and requirements to be included in a base 
# DigitalProductPassport, we can include more in a future version.

# Similarly, the Destruction and Transfer Events can be represented in a similar way.
# Destruction is usually done by a single entity, and Transfer involves a couple of entities.
# Context specific ontologies might add further categories/complex variations to these basic 
# aspects.

:EventLog a owl:Class;
    rdfs:domain dpp:DigitalProductPassport;
    rdfs:range prov:Activity .

# Event log must remain generic, as we define templates at an industry level.